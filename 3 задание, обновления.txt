Основные изменения 3 задания в fraction, map, game

Изменения концепции: бой между армиями рассчитывается автоматически (в качестве заглушки ради создания первой играбельной версии).

Добавлена возможность непосредственно играть. Число фракций пока ограниченно двумя, но никакие механики не ограничивают этого числа (для добавления фракции достаточно добавить соответствующий unit_creaor). Пока доступна только игра на 2 игроков с одного компьютера.

Ход игры:
1)В начале хода игрок получает некоторое колличество золота, которое зависит от колличества армий и уровня города.
2)В игре есть 3 основных меню: глобальная карта, конкретная армия, ваш город. Если вы находитсь в одном из них, для перехода  другое введите g/a/c соответственно. Для того, чтобы узнать пункты текущего меню, введите h
3)На глобальной карте вы можете посмотреть карту и передать ход следующему игроку.
  В меню города улучшить город (увеличит приток золота) или создать армию.
  В меню армии вы можете улучшить армию(пока без реализации) или отдать команду на перемещение.
4)Побеждает игрок, захвативший столицу противника.

Архитектура:
1)Изначально для работы с командами планировалось использовать паттерн Command, но по мере написания я заметил, что у меня получается 3 различных состояния, в каждом из которых я хочу иметь разный интерфейс работы со схожим набором функций. Поэтому я отказался от Command и решил истользовать State. Также State значительно упростит добавление в будущем дополнительных элементов игры, слабо связанных с нынешними (например, локального сражения), которые существенно усложнят её структуру.

2)Карта реализованна как двумерный массив локаций. Для комфортной и быстрой работы с картой используется паттерн Observer. Каждая клетка хранит список указателей на армии, которые на неё подписанны. При создании армия подписывается на место создания, при передвижении меняет подписку. Если армия оказалась на новой клетке, она смотрит на другие армии, которые подписанны на эту клетку и, если это армии противника, сражается с ними.

3)Единственное место, в которм можно использовать CoR это set_next_step в подклассах State, но его применение в данном случае кажется мне довольно натянутым, к тому же это существенно усложняет структуру кода, а ведь паттерны нужны для решения проблем, а не их создания.

Планы:
	Сделать скорость передвижения армии зависимой от юнитов
	Прикрутить ко всем менюшкам вывод статистики
	Увеличить число городов у одной фракции
	Дать возможность тратить не всё накопленное золото
	Отбалансировать юниты
	Написать скилы юнитов и командиров армий
	Добавить локальное сражение
